<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>ReactivePlayGround</name></assembly>
<members>
<member name="M:Easj360FSharp.EventObservable.guard``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit},System.IObservable{``0})">
<summary>
 Creates an observable that calls the specified function after someone
 subscribes to it (useful for waiting using &apos;let!&apos; when we need to start
 operation after &apos;let!&apos; attaches handler)
</summary>
</member>
<member name="M:Easj360FSharp.Extensions.Async.WithResult.Static``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Control.FSharpAsync{``0})">
<summary>
 Constructs workflow that triggers the specified event 
 on the GUI thread when the wrapped async completes 
</summary>
</member>
<member name="M:Easj360FSharp.Extensions.synchronize``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``1})">
<summary>
 Ensures that the continuation will be called in the same synchronization
 context as where the operation was started
</summary>
</member>
<member name="T:Easj360FSharp.FSharpObservable.ObservableSource`1">
<summary>
 Utility class for creating a source of &apos;serialized&apos; IObserver events.
</summary>
</member>
<member name="M:Event.window``1(System.Int32,Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{``0},``0})">
<summary>
 An event which triggers on every &apos;n&apos; triggers of the input event
</summary>
</member>
<member name="M:Event.every``1(System.Int32,Microsoft.FSharp.Control.IEvent{Microsoft.FSharp.Control.FSharpHandler{``0},``0})">
<summary>
 An event which triggers on every &apos;n&apos; triggers of the input event
</summary>
</member>
</members>
</doc>
