<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FSDataFlow</name></assembly>
<members>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Observable.Subject.t`1.Next(`0)">
<summary>
 Raises OnNext in all the observers
</summary>
</member>
<member name="M:Observable.Subject.t`1.Error(System.Exception)">
<summary>
 Raises OnError in all the observers
</summary>
</member>
<member name="M:Observable.Subject.t`1.Completed">
<summary>
 Raises OnCompleted in all the observers
</summary>
</member>
<member name="">

</member>
<member name="T:Observable.Subject.t`1">
<summary>
 Type t that implements IObservable&lt;&apos;T&gt; and IObserver&lt;&apos;T&gt;
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Observable.Subject.Message">
<summary>
 Messages required for the mailbox loop
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Observable.Subject.State">
<summary>
 Subject state maintained inside of the mailbox loop
</summary>
</member>
<member name="T:Observable.Subject">

</member>
<member name="T:Observable">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Program.AgentStuff">

</member>
<member name="">

</member>
<member name="M:Program.QueueAgent.BlockingQueueAgent`2.AsyncGet(Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Asynchronously gets item from the queue. If there are no items
 in the queue, the operation will block unitl items are added.
</summary>
</member>
<member name="M:Program.QueueAgent.BlockingQueueAgent`2.AsyncAdd(`0,Microsoft.FSharp.Core.FSharpOption{System.Int32})">
<summary>
 Asynchronously adds item to the queue. The operation ends when
 there is a place for the item. If the queue is full, the operation
 will block until some items are removed.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Program.QueueAgent">

</member>
<member name="">

</member>
<member name="M:Program.ThrottlingAgnet.ThrottlingAgent`2.DoWork(`0)">
<summary>
 Queue the specified asynchronous workflow for processing
</summary>
</member>
<member name="">

</member>
<member name="T:Program.ThrottlingAgnet.ThrottlingAgent`2">
<summary>
 Represents an agent that runs operations in concurrently. When the number
 of concurrent operations exceeds &apos;limit&apos;, they are queued and processed later
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Program.ThrottlingAgnet.ThrottlingAgentMessage`2">
<summary>
 Message type used by the agent - contains queueing 
 of work items and notification of completion 
</summary>
</member>
<member name="T:Program.ThrottlingAgnet">

</member>
<member name="T:Program">

</member>
</members>
</doc>
