<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>FunScript.TypeScript</name></assembly>
<members>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.DeclarationsFile">
<summary>
 See TypeScript Specification Appendix A.9 
 (http://typescript.codeplex.com/releases/view/105503)
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.DeclarationElement.RootReference">
<summary>
 /// &lt;reference ... /&gt;
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.DeclarationElement.RootAmbientDeclaration">
<summary>
 export[opt] AmbientDeclaration
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.DeclarationElement.RootExternalImportDeclaration">
<summary>
 export[opt] ExternalImportDeclaration 
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.DeclarationElement.RootImportDeclaration">
<summary>
 export[opt] ImportDeclaration 
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.DeclarationElement.RootInterfaceDeclaration">
<summary>
 export[opt] InterfaceDeclaration 
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.DeclarationElement.RootExportAssignment">
<summary>
 export = Identifier ;
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.RootReference.NoDefaultLib">
<summary>
 /// &lt;reference no-default-lib=&quot;true|false&quot; /&gt;
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.RootReference.File">
<summary>
 /// &lt;reference path=&quot;../jquery/jquery.d.ts&quot; /&gt;
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.AmbientDeclaration.AmbientExternalModuleDeclaration">
<summary>
 module StringLiteral { AmbientExternalModuleBody }
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.AmbientDeclaration.AmbientModuleDeclaration">
<summary>
 AmbientModuleDeclaration: module IdentifierPath { AmbientModuleBody }
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.AmbientDeclaration">
<summary>
 AmbientDeclaration:
 | declare AmbientVariableDeclaration
 | declare AmbientFunctionDeclaration
 | declare AmbientClassDeclaration
 | declare AmbientEnumDeclaration
 | declare AmbientModuleDeclaration
 | declare AmbientExternalModuleDeclaration
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.AmbientExternalModuleElement">
<summary>
 AmbientExternalModuleBody: AmbientExternalModuleElements[opt]
 AmbientExternalModuleElements: AmbientExternalModuleElement | AmbientExternalModuleElements AmbientExternalModuleElement
 AmbientExternalModuleElement: AmbientModuleElement | ExportAssignment | export[opt] ExternalImportDeclaration
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.AmbientModuleElement">
<summary>
 AmbientModuleBody: AmbientModuleElements[opt]
 AmbientModuleElements: AmbientModuleElement | AmbientModuleElements AmbientModuleElement
 AmbientModuleElement: 
 | export[opt] AmbientVariableDeclaration 
 | export[opt] AmbientFunctionDeclaration 
 | export[opt] AmbientClassDeclaration 
 | export[opt] InterfaceDeclaration 
 | export[opt] AmbientEnumDeclaration 
 | export[opt] AmbientModuleDeclaration 
 | export[opt] ImportDeclaration
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.ExportAssignment.ExportAssignment">
<summary>
 export = Identifier ;
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.InterfaceDeclaration.InterfaceDeclaration">
<summary>
 interface Identifier TypeParameters[opt] InterfaceExtendsClause[opt] ObjectType
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.ExternalImportDeclaration.ExternalImportDeclaration">
<summary>
 ExternalImportDeclaration: import Identifier = ExternalModuleReference ;
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.ImportDeclaration.ImportDeclaration">
<summary>
 ImportDeclaration: import Identifier = EntityName ;
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.CommonAmbientElement.AmbientEnumDeclaration">
<summary>
 AmbientEnumDeclaration: enum Identifier { AmbientEnumBody[opt] }
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.CommonAmbientElement.AmbientClassDeclaration">
<summary>
 AmbientClassDeclaration: class Identifier TypeParameters[opt] ClassHeritage { AmbientClassBody }
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.CommonAmbientElement.AmbientFunctionDeclaration">
<summary>
 AmbientFunctionDeclaration: function Identifier CallSignature ;
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.CommonAmbientElement.AmbientVariableDeclaration">
<summary>
 AmbientVariableDeclaration: var Identifier TypeAnnotation[opt] ;
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.AmbientEnumMember">
<summary>
 AmbientEnumBody: AmbientEnumMemberList ,[opt]
 AmbientEnumMemberList: AmbientEnumMember | AmbientEnumMemberList , AmbientEnumMember
 AmbientEnumMember: PropertyName | PropertyName = IntegerLiteral
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.AmbientClassBodyElement.AmbientIndexSignature">
<summary>
 IndexSignature
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.AmbientClassBodyElement.AmbientMemberDeclaration">
<summary>
 AmbientMemberDeclaration
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.AmbientClassBodyElement.AmbientConstructorDeclaration">
<summary>
 AmbientConstructorDeclaration: constructor ( ParameterList[opt] ) ;
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.AmbientClassBodyElement">
<summary>
 AmbientClassBody: AmbientClassBodyElements[opt]
 AmbientClassBodyElements: AmbientClassBodyElement | AmbientClassBodyElements AmbientClassBodyElement
 AmbientClassBodyElement: AmbientConstructorDeclaration | AmbientMemberDeclaration | IndexSignature
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.AmbientMemberDeclaration">
<summary>
 AmbientMemberDeclaration: 
 | PublicOrPrivate[opt] static[opt] PropertyName TypeAnnotation[opt] ; 
 | PublicOrPrivate[opt] static[opt] PropertyName CallSignature ;
 ***** NOTE: THIS IS NOT CONTAINED IN THE SPEC BUT ALSO SEEMS TO BE VALID
             WHERE static IS THE IDENTIFIER RATHER THAN A KEYWORD
 | PublicOrPrivate[opt] static CallSignature ;
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.ClassHeritage.ClassHeritage">
<summary>
 ClassHeritage: ClassExtendsClause[opt] ImplementsClause[opt]
 ClassExtendsClause: extends ClassType
 ClassType: TypeReference
 ImplementsClause: implements ClassOrInterfaceTypeList
 ClassOrInterfaceTypeList: ClassOrInterfaceType | ClassOrInterfaceTypeList , ClassOrInterfaceType
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.ObjectType.ObjectType">
<summary>
 { TypeBody[opt] }
 TypeBody: TypeMemberList ;[opt]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.TypeMember">
<summary>
 TypeMemberList: TypeMember | TypeMemberList ; TypeMember
 TypeMember: PropertySignature | CallSignature | ConstructSignature | IndexSignature | MethodSignature
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.MethodSignature.MethodSignature">
<summary>
 MethodSignature: PropertyName ?[opt] CallSignature
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.IndexSignature">
<summary>
 IndexSignature: 
 | [ Identifier : string ] TypeAnnotation 
 | [ Identifier : number ] TypeAnnotation
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.ConstructSignature.ConstructSignature">
<summary>
 ConstructSignature: new TypeParameters[opt] ( ParameterList[opt] ) TypeAnnotation[opt]
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.CallSignature.CallSignature">
<summary>
 CallSignature: TypeParameters[opt] ( ParameterList[opt] ) TypeAnnotation[opt]
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.PropertySignature.PropertySignature">
<summary>
 PropertySignature: PropertyName ?[opt] TypeAnnotation[opt]
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.TypeAnnotation.TypeAnnotation">
<summary>
 TypeAnnotation: : Type
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.Type">
<summary>
 Type: PredefinedType | TypeReference | TypeLiteral | TypeQuery
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.TypeQuery">
<summary>
 TypeQuery: typeof TypeQueryExpression 
 TypeQueryExpression: Identifier | TypeQueryExpression . IdentifierName 
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.TypeLiteral.LiteralConstructorType">
<summary>
 ConstructorType: new TypeParameters[opt] ( ParameterList[opt] ) =&gt; Type
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.TypeLiteral.LiteralFunctionType">
<summary>
 FunctionType: TypeParameters[opt] ( ParameterList[opt] ) =&gt; Type
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.TypeLiteral.LiteralArrayType">
<summary>
 ArrayType: Type [ ]
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.TypeLiteral">
<summary>
 TypeLiteral: ObjectType | ArrayType | FunctionType | ConstructorType
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.ParameterList.ParameterList">
<summary>
 ParameterList: 
 | RequiredParameterList 
 | OptionalParameterList 
 | RestParameter 
 | RequiredParameterList , OptionalParameterList 
 | RequiredParameterList , RestParameter 
 | OptionalParameterList , RestParameter 
 | RequiredParameterList , OptionalParameterList , RestParameter
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.ParameterList">
<summary>
 ***** NOTE: NOT DECLARED IN SPEC BUT USED AND ACCEPTED BY COMPILER
 | PublicOrPrivate[opt] Identifier ? : StringLiteral
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.OptionalParameter.DefaultParameter">
<summary>
 | PublicOrPrivate[opt] Identifier TypeAnnotation[opt] Initialiser
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.OptionalParameter.OptionalParameter">
<summary>
 | PublicOrPrivate[opt] Identifier ? TypeAnnotation[opt] 
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.OptionalParameter">
<summary>
 OptionalParameterList: OptionalParameter | OptionalParameterList , OptionalParameter
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.RestParameter.RestParameter">
<summary>
 RestParameter: ... Identifier TypeAnnotation[opt]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.RequiredParameter">
<summary>
 RequiredParameterList: RequiredParameter | RequiredParameterList , RequiredParameter
 RequiredParameter: 
 | PublicOrPrivate[opt] Identifier TypeAnnotation[opt] 
 | Identifier : StringLiteral
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.PublicOrPrivate">
<summary>
 PublicOrPrivate: public | private
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.PredefinedType">
<summary>
 PredefinedType: any | number | boolean | string | void
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.PropertyName">
<summary>
 PropertyName: IdentifierName | StringLiteral | NumericLiteral
</summary>
</member>
<member name="T:FunScript.TypeScript.AST.TypeParameter.TypeParameter">
<summary>
 TypeParameters: &lt; TypeParameterList &gt;
 TypeParameterList: TypeParameter | TypeParameterList , TypeParameter
 TypeParameter: Identifier Constraint[opt]
 Constraint: extends TypeReference
 ***** NOTE: THE SPEC SEEMS TO BE INCORRECT HERE
             THE &apos;*.d.ts&apos; FILES USE Type AND NOT TypeReference
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.InterfaceExtendsClause.InterfaceExtendsClause">
<summary>
 extends ClassOrInterfaceTypeList
 ClassOrInterfaceTypeList: ClassOrInterfaceType | ClassOrInterfaceTypeList , ClassOrInterfaceType
 ClassOrInterfaceType: TypeReference
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.TypeReference.TypeReference">
<summary>
 TypeReference: TypeName TypeArguments[opt]
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.ExternalModuleReference.ExternalModuleReference">
<summary>
 ExternalImportDeclaration: import Identifier = ExternalModuleReference ;
 ExternalModuleReference: require ( StringLiteral )
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST.EntityName.EntityName">
<summary>
 IdentifierPath: Identifier | IdentifierPath . Identifier
 EntityName: Identifier ModuleName . Identifier
 TypeName: Identifier ModuleName . Identifier
 TypeQueryExpression: Identifier | TypeQueryExpression . IdentifierName 
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.AST">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FunScript.TypeScript.Parser.propertySignature">
<summary>
 Note: rearranged due to indirect left recursion!
</summary>
</member>
<member name="P:FunScript.TypeScript.Parser.typeLiteral">
<summary>
 Note: rearranged due to indirect left recursion!
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:FunScript.TypeScript.Parser.restParameter">
<summary>
 ***** NOTE: NOT DECLARED IN SPEC BUT USED AND ACCEPTED BY COMPILER
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.Parser">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FunScript.TypeScript.Provider.openFileOrUri(System.String,System.String)">
<summary>
 Open a file from file system or from the web in a type provider context
 (File may be relative to the type provider resolution folder and web
 resources must start with &apos;http://&apos; prefix)
</summary>
</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.Provider">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.TypeGenerator.Compiler">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.bugFixTypeExtensionGenericConstraint``1(Microsoft.FSharp.Collections.FSharpSet{FunScript.TypeScript.TypeGenerator.Domain.TypeRef},``0,Microsoft.FSharp.Collections.FSharpList{System.Tuple{FunScript.TypeScript.TypeGenerator.Domain.TypeRef,FunScript.TypeScript.TypeGenerator.Domain.TypeRef}})">
<summary>
 See: http://stackoverflow.com/questions/19516961/why-cant-you-use-generic-type-parameters-in-constraints-on-type-extensions
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.collisionFix(Microsoft.FSharp.Collections.FSharpSet{FunScript.TypeScript.TypeGenerator.Domain.TypeRef},Microsoft.FSharp.Collections.FSharpList{FunScript.TypeScript.TypeGenerator.Domain.TypeRef})">
<summary>
 Creates a function to rename a methods generic parameters
 where they conflict with the types generic parameters.
</summary>
</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.typeDeclarationsAndSignatures``1(Microsoft.FSharp.Collections.FSharpMap{System.Tuple{Microsoft.FSharp.Collections.FSharpList{System.String},System.Int32},``0},Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpMap{Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String}}},Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Collections.FSharpList{System.String},System.Int32},System.Boolean}})">
<summary>
 Returns the code of the type declarations needed for a given
 module of FFI elements. This filters out the types already
 declared in dependencies. Also, returns a map from type key
 to type signature.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.replaceGenericParameters(Microsoft.FSharp.Collections.FSharpMap{FunScript.TypeScript.TypeGenerator.Domain.TypeRef,FunScript.TypeScript.TypeGenerator.Domain.TypeRef},FunScript.TypeScript.TypeGenerator.Domain.TypeRef)">
<summary>
 Replaces all references to generic parameters in the given type ref
 with an F# friendly generic parameter name.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.constraintCode``1(``0,FunScript.TypeScript.TypeGenerator.Domain.TypeRef,FunScript.TypeScript.TypeGenerator.Domain.TypeRef)">
<summary>
 Builds the code segment specifying a sub type relationship type constraint.
</summary>
</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.replaceArrayWithIList(FunScript.TypeScript.TypeGenerator.Domain.TypeRef)">
<summary>
 This is to work around the restriction where you cannot have a type parameter
 that `a :&gt; `b[]
</summary>
</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.typeReferenceCode(FunScript.TypeScript.TypeGenerator.Domain.TypeRef)">
<summary>
 Returns the F# string representing the type ref. It assumes that the generic
 parameters have been mapped into F# friendly back-ticked type refs and that
 all types have been resolved.
</summary>
</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.resolveTypeRef(System.Boolean,Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Collections.FSharpMap{Microsoft.FSharp.Collections.FSharpList{System.String},Microsoft.FSharp.Collections.FSharpList{System.String}}},Microsoft.FSharp.Collections.FSharpList{Microsoft.FSharp.Core.FSharpFunc{System.Tuple{Microsoft.FSharp.Collections.FSharpList{System.String},System.Int32},System.Boolean}},FunScript.TypeScript.TypeGenerator.Domain.TypeRef,Microsoft.FSharp.Collections.FSharpSet{FunScript.TypeScript.TypeGenerator.Domain.TypeRef},FunScript.TypeScript.TypeGenerator.Domain.TypeRef)">
<summary>
 Tries to resolve a TypeRef from the generic type parameters at the location
 or the known types in the current module or the referenced modules.
</summary>
</member>
<member name="">

</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.|TypeDeclarationId|_|(FunScript.TypeScript.TypeGenerator.Domain.TypeRef)">
<summary>
 Tries to return a (name * namespace * parameter list) tuple for declaring
 types. This doesn&apos;t search the type space to resolve the type.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.groupByParentType(System.Collections.Generic.IEnumerable{FunScript.TypeScript.TypeGenerator.Domain.FFIElement})">
<summary>
 Groups ffi elements by the name of the parent type and 
 its number of generic parameters.
</summary>
</member>
<member name="">

</member>
<member name="M:FunScript.TypeScript.TypeGenerator.Generate.typeRefToTypeKey(FunScript.TypeScript.TypeGenerator.Domain.TypeRef)">
<summary>
 Creates a key based on what F# would consider a unique type.
 For example IFoo&lt;&apos;a, &apos;b&gt; and IFoo&lt;&apos;b, &apos;c&gt; would clash and
 must be merged for this reason.
</summary>
</member>
<member name="T:FunScript.TypeScript.TypeGenerator.Generate">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.TypeGenerator.Identifier">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.TypeGenerator.FFIMapping">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.TypeGenerator.Domain">

</member>
<member name="">

</member>
<member name="T:FunScript.TypeScript.TypeGenerator.List">

</member>
<member name="T:FunScript.TypeScript.TypeGenerator">

</member>
</members>
</doc>
