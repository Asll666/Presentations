<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Utilities</name></assembly>
<members>
<member name="P:Utilities.BlockingMultiplexer`1.Count">
<summary>
 Returns the number of items in all of the producer queues and in the multiplexer&apos;s buffers
</summary>
</member>
<member name="M:Utilities.BlockingMultiplexer`1.GetProducerQueue">
 <summary>
 Creates a new input source to the multiplexer.
 </summary>
 <returns>A blocking collection that will be used as one of the multiplexer's inputs.
 </returns>
 <remarks>This blocking collection for the use of the producer only. Its only consumer of the 
 is the multiplexer instance that created it.
 
 The producer should invoke Add to insert elements as needed. After the last element, the producer 
 invokes CompleteAdding.
 
 If the boundedCapacity was specified in the multiplexer's constructor, this value will be used as the
 boundedCapacity of the blocking collections used by the producers. This will cause the producer to block
 when trying to add elements to the blocking collection above this limit.
 
 There is a partial order constraint on the values added by the producer to this blocking collection. The 
 lockOrderFn that was provided to the constructor of the multiplexer will be applied to each element in 
 the queue by the multiplexer. If the lockOrderFn returns a non-negative value for the enqueued 
 object, this value must be strictly greater than the lock order of all previous objects that were added 
 to this blocking collection.
 
 All producer queues must be created before getting the consumer's enumerable object.</remarks>
</member>
<member name="M:Utilities.BlockingMultiplexer`1.GetConsumingEnumerable(Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>
 Creates an enumerable object for use by the consumer.
 </summary>
 <param name="token">The cancellation token</param>
 <returns>An enumeration of values. The order of the values will respect the lock order of the
 producer queues. This method may be called only one time for this object.</returns>
</member>
<member name="M:Utilities.BlockingMultiplexer`1.GetCleanupEnumerable">
<summary>
 Returns an enumeration of all values that have been read by the multiplexer but not yet consumed.
</summary>
</member>
<member name="M:Utilities.BlockingMultiplexer`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{`0,System.Int32},System.Int32)">
 <summary>
 Creates a multiplexer that serializes inputs from multiple producer queues.
 </summary>
 <param name="lockOrderFn">Delegate that returns an integer sequence number for elements of the 
 producer queues. It returns a negative number if order is not important for a given element.</param>
 <param name="initialLockId">The first lock id of the sequence</param>
</member>
<member name="M:Utilities.BlockingMultiplexer`1.#ctor(Microsoft.FSharp.Core.FSharpFunc{`0,System.Int32},System.Int32,System.Int32)">
 <summary>
 Creates a multiplexer that serializes inputs from multiple producer queues.
 </summary>
 <param name="lockOrderFn">Function that returns an integer sequence number for elements of the 
 producer queues. It returns a negative number if order is not important for a given element.</param>
 <param name="initialLockId">The first lock id of the sequence</param>
 <param name="boundedCapacity">The maximum number of elements that a producer queue
 may contain before it blocks the producer.</param>
</member>
<member name="T:Utilities.BlockingMultiplexer`1">
 <summary>
   Multiplexer that serializes inputs from multiple producers into a single 
   consumer enumeration in a user-specified order. 
 </summary>
 <typeparam name="T">The type of input element</typeparam>
 <remarks>
   The use case for this class is a producer/consumer scenario with multiple producers and 
   a single consumer. The producers each have their private blocking collections for enqueuing the elements
   that they produce. The consumer of the producer queues is the multiplexer, which is responsible 
   combining the inputs from all of the producers according to user-provided "lock order." The multiplexer 
   provides an enumeration that a consumer can use to observe the multiplexed values in the chosen order. 
 
   The multiplexer does not perform sorting. Instead, it relies on the fact the the producer queues are
   locally ordered and looks for the next value by simultaneously monitoring the heads of 
   all of the producer queues.
 
   The order of elements in the producer queues is given by a user-provided lockOrderFn delegate. This is called
   lock order and is represented by an integer. The initial lock id is specified in the multiplexer's constructor. 
   Producer queues must be consistent. This means that they are locally ordered with respect to lock ids. When
   multiplexed together into a single enumeration, the producer queues must produce a sequence of values whose 
   lock ids are consecutive. (The lock ids in the individual producer queues must be in order but not necessarily 
   consecutive.)
 
   It is not required that all elements in the producer queues have a lock order. The position of such elements (denoted
   by a lock id that is less than zero) is constrained by preceding and succeeding elements in the producer's queue
   that do include a lock order. This results in a partial order. The unit tests for this class for an example of 
   partial ordering constraints.
 
   See Campbell et al, "Multiplexing of Partially Ordered Events," in TestCom 2005, Springer Verlag, June 2005,  
   available online at http://research.microsoft.com/apps/pubs/default.aspx?id=77808. 
 </remarks>
</member>
<member name="M:Utilities.GaussianRandom.NextInteger">
<summary>
 Samples the distribution and returns a random integer. Returns 
 a normally distributed random number rounded to the nearest integer
</summary>
</member>
<member name="M:Utilities.GaussianRandom.Next">
<summary>
 Samples the distribution; returns a random sample from a normal distribution
</summary>
</member>
<member name="T:Utilities.GaussianRandom">
<summary>
 Creates a new instance of a normally distributed random value generator
 using the specified mean and standard deviation and seed.
</summary>
</member>
<member name="P:Utilities.Trend.Slope">
<summary>
 The change in y per unit of x.
</summary>
</member>
<member name="P:Utilities.Trend.Intercept">
<summary>
 The value of y when x is zero.
</summary>
</member>
<member name="M:Utilities.Trend.Predict(System.Double)">
<summary>
 Predicts a y value given any x value using the formula y = slope * x + intercept.
</summary>
</member>
<member name="T:Utilities.Trend">
<summary>
 Linear trend from slope and intercept. Predict y given any x value 
 using the formula y = slope * x + intercept.
</summary>
</member>
<member name="M:Utilities.SampleUtilities.MakeRandomSeed">
 <summary>
 Creates a seed that does not depend on the system clock. A 
 unique value will be created with each invocation.
 </summary>
 <returns>An integer that can be used to seed a random generator</returns>
 <remarks>This method is thread safe.</remarks>
</member>
<member name="M:Utilities.SampleUtilities.GaussianInverse(System.Double,System.Double,System.Double)">
 <summary>
 Calculates an approximation of the inverse of the cumulative normal distribution.
 </summary>
 <param name="cumulativeDistribution">The percentile as a fraction (.50 is the fiftieth percentile). 
 Must be greater than 0 and less than 1.</param>
 <param name="mean">The underlying distribution's average (i.e., the value at the 50th percentile) (</param>
 <param name="standardDeviation">The distribution's standard deviation</param>
 <returns>The value whose cumulative normal distribution (given mean and stddev) is the percentile given as an argument.</returns>
</member>
<member name="M:Utilities.SampleUtilities.GaussianInverseSimple(System.Double)">
<summary>
 Adaptation of Peter J. Acklam&apos;s Perl implementation. 
 See http://home.online.no/~pjacklam/notes/invnorm/
 This approximation has a relative error of 1.15 × 10−9 or less. 
</summary>
</member>
<member name="M:Utilities.SampleUtilities.FitImplicit(System.Double[])">
 <summary>
 Linear regression with x-values given implicity by the y-value indices
 </summary>
 <param name="ordinateValues">A series of two or more values</param>
 <returns>A trend line</returns>
</member>
<member name="M:Utilities.SampleUtilities.Fit(System.Double[],System.Double[])">
 <summary>
 Linear regression of (x, y) pairs
 </summary>
 <param name="abscissaValues">The x values</param>
 <param name="ordinateValues">The y values corresponding to each x value</param>
 <returns>A trend line that best predicts each (x, y) pair</returns>
</member>
<member name="M:Utilities.SampleUtilities.Range(System.Int32)">
<summary>
 Return array of floats for indices 0 .. count-1
</summary>
</member>
<member name="M:Utilities.SampleUtilities.GetImageFilenames(System.String,System.Int32)">
<summary>
 Repeatedly loop through all of the files in the source directory. This
 enumerable has an infinite number of values.
</summary>
</member>
<member name="M:Utilities.SampleUtilities.GetImageFilenamesList(System.String,System.Int32)">
 <summary>
 Get names of image files in directory
 </summary>
 <param name="sourceDir">Name of directory</param>
 <param name="maxImages">Maximum number of image file names to return</param>
 <returns>List of image file names in directory (basenames not including directory path)</returns>
</member>
<member name="M:Utilities.SampleUtilities.CheckFileExists(System.String)">
<summary>
 Check whether file exists, if not write message and exit immediately.
 (can&apos;t use this method to check whether directory exists)
</summary>
</member>
<member name="M:Utilities.SampleUtilities.CheckDirectoryExists(System.String)">
<summary>
 Check whether directory exists, if not write message and exit immediately.
</summary>
</member>
<member name="M:Utilities.SampleUtilities.AsyncDoIoIntensiveOperation(System.Double,System.Threading.CancellationToken,System.Boolean)">
<summary>
 Simulates an I/O-intensive operation on a single core. The operation will 
 use only a small percent of a single CPU&apos;s cycles however, it will block 
 for the specified number of seconds.

 This is same as &apos;DoIoIntensiveOperation&apos;, but uses F# asyncs to simulate
 non-blocking (asynchronous) I/O typical in F# async applications.
</summary>
</member>
<member name="M:Utilities.SampleUtilities.DoIoIntensiveOperation(System.Double,System.Threading.CancellationToken,System.Boolean)">
 <summary>
 Simulates an I/O-intensive operation on a single core. The operation will use only a small percent of a
 single CPU's cycles however, it will block for the specified number of seconds.
 </summary>
 <param name="seconds">The approximate duration of the operation in seconds</param>
 <param name="token">A token that may signal a request to cancel the operation.</param>
 <param name="throwOnCancel">true if an execption should be thrown in response to a cancellation request.</param>
 <returns>true if operation completed normally false if the user canceled the operation</returns>
</member>
<member name="M:Utilities.SampleUtilities.DoCpuIntensiveOperationSimple(System.Double)">
 <summary>
 Simulates a CPU-intensive operation on a single core. The operation will use approximately 100% of a
 single CPU for a specified duration.
 </summary>
 <param name="seconds">The approximate duration of the operation in seconds</param>
 <returns>true if operation completed normally false if the user canceled the operation</returns>
</member>
<member name="M:Utilities.SampleUtilities.DoCpuIntensiveOperation(System.Double,System.Threading.CancellationToken,System.Boolean)">
 <summary>
 Simulates a CPU-intensive operation on a single core. The operation will use approximately 100% of a
 single CPU for a specified duration.
 </summary>
 <param name="seconds">The approximate duration of the operation in seconds</param>
 <param name="token">A token that may signal a request to cancel the operation.</param>
 <param name="throwOnCancel">true if an execption should be thrown in response to a cancellation request.</param>
 <returns>true if operation completed normally false if the user canceled the operation</returns>
</member>
<member name="M:Utilities.SampleUtilities.TimedRun``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Executes a function and prints timing results
</summary>
</member>
<member name="M:Utilities.SampleUtilities.TimedAction``1(System.String,Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,``0})">
<summary>
 Executes a function and prints timing results
</summary>
</member>
<member name="M:Utilities.SampleUtilities.PrintTime(System.TimeSpan)">
<summary>
 Format and print elapsed time returned by Stopwatch
</summary>
</member>
<member name="M:Utilities.SampleUtilities.FormattedTime(System.TimeSpan)">
 <summary>
 TimeSpan pretty printer
 </summary>
 <param name="ts">The TimeSpan to format</param>
 <returns>A formatted string</returns>
</member>
<member name="T:Utilities.SampleUtilities">
<summary>
 Static class that contains timing and numerical utilities
</summary>
</member>
</members>
</doc>
