<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Streams.CSharp</name>
    </assembly>
    <members>
        <member name="T:Nessos.Streams.CSharp.Streams">
            <summary>
            Stream operations
            </summary>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.AsStream``1(``0[])">
            <summary>Wraps array as a stream.</summary>
            <param name="source">The input array.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.AsStream``1(System.Collections.Generic.List{``0})">
            <summary>Wraps List as a stream.</summary>
            <param name="source">The input list.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.AsStream``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Wraps IEnumerable as a stream.</summary>
            <param name="source">The input seq.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Select``2(Nessos.Streams.Stream{``0},System.Func{``0,``1})">
            <summary>Transforms each element of the input stream.</summary>
            <param name="f">A function to transform items from the input stream.</param>
            <param name="stream">The input stream.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Where``1(Nessos.Streams.Stream{``0},System.Func{``0,System.Boolean})">
            <summary>Filters the elements of the input stream.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input stream.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.SelectMany``2(Nessos.Streams.Stream{``0},System.Func{``0,Nessos.Streams.Stream{``1}})">
            <summary>Transforms each element of the input stream to a new stream and flattens its elements.</summary>
            <param name="f">A function to transform items from the input stream.</param>
            <param name="stream">The input stream.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Aggregate``2(Nessos.Streams.Stream{``0},``1,System.Func{``1,``0,``1})">
            <summary>Applies a function to each element of the stream, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN, then this function computes f (... (f s i0)...) iN.</summary>
            <param name="folder">A function that updates the state with each element from the stream.</param>
            <param name="state">The initial state.</param>
            <param name="stream">The input stream.</param>
            <returns>The final result.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.OrderBy``2(Nessos.Streams.Stream{``0},System.Func{``0,``1})">
            <summary>Applies a key-generating function to each element of the input stream and yields a stream ordered by keys. </summary>
            <param name="projection">A function to transform items of the input stream into comparable keys.</param>
            <param name="stream">The input stream.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.GroupBy``2(Nessos.Streams.Stream{``0},System.Func{``0,``1})">
            <summary>Applies a key-generating function to each element of the input stream and yields a stream of unique keys and a sequence of all elements that have each key.</summary>
            <param name="projection">A function to transform items of the input stream into comparable keys.</param>
            <param name="stream">The input stream.</param>
            <returns>A stream of IGrouping.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Sum(Nessos.Streams.Stream{System.Int32})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Sum(Nessos.Streams.Stream{System.Int64})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Sum(Nessos.Streams.Stream{System.Single})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Sum(Nessos.Streams.Stream{System.Double})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Sum(Nessos.Streams.Stream{System.Decimal})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Count``1(Nessos.Streams.Stream{``0})">
            <summary>Returns the total number of elements of the stream.</summary>
            <param name="stream">The input stream.</param>
            <returns>The total number of elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.ToArray``1(Nessos.Streams.Stream{``0})">
            <summary>Creates an array from the given stream.</summary>
            <param name="stream">The input stream.</param>
            <returns>The result array.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.ToEnumerable``1(Nessos.Streams.Stream{``0})">
            <summary>Creates an IEnumerable from the given stream.</summary>
            <param name="stream">The input stream.</param>
            <returns>The result IEnumerable.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.ToList``1(Nessos.Streams.Stream{``0})">
            <summary>Creates an ResizeArray from the given stream.</summary>
            <param name="stream">The input stream.</param>
            <returns>The result ResizeArray.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.First``1(Nessos.Streams.Stream{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the first element for which the given function returns true. Raises InvalidOperationException if no such element exists.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input stream.</param>
            <returns>The first element for which the predicate returns true.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the predicate evaluates to false for all the elements of the stream or the stream is empty.</exception>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.First``1(Nessos.Streams.Stream{``0})">
            <summary>Returns the first element in the stream.</summary>
            <param name="stream">The input stream.</param>
            <returns>The first element in the stream.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the stream is empty.</exception>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.FirstOrDefault``1(Nessos.Streams.Stream{``0})">
            <summary>Returns the first element in the stream, or the default value if the stream is empty.</summary>
            <param name="stream">The input stream.</param>
            <returns>The first element in the stream, or the default value if the input stream is empty.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.FirstOrDefault``1(Nessos.Streams.Stream{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the first element for which the given function returns true. Returns the default value if no such element exists, or the input stream is empty.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input stream.</param>
            <returns>The first element for which the predicate returns true, or the default value if no such element exists or the input stream is empty.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Any``1(Nessos.Streams.Stream{``0},System.Func{``0,System.Boolean})">
            <summary>Tests if any element of the stream satisfies the given predicate.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input stream.</param>
            <returns>true if any element satisfies the predicate. Otherwise, returns false.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.All``1(Nessos.Streams.Stream{``0},System.Func{``0,System.Boolean})">
            <summary>Tests if all elements of the stream satisfy the given predicate.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input stream.</param>
            <returns>true if all of the elements satisfies the predicate. Otherwise, returns false.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Take``1(Nessos.Streams.Stream{``0},System.Int32)">
            <summary>Returns the elements of the stream up to a specified count.</summary>
            <param name="n">The number of items to take.</param>
            <param name="stream">The input stream.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Skip``1(Nessos.Streams.Stream{``0},System.Int32)">
            <summary>Returns a stream that skips N elements of the input stream and then yields the remaining elements of the stream.</summary>
            <param name="n">The number of items to skip.</param>
            <param name="stream">The input stream.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.MaxBy``2(Nessos.Streams.Stream{``0},System.Func{``0,``1})">
            <summary>Locates the maximum element of the stream by given key.</summary>
            <param name="projection">A function to transform items of the input stream into comparable keys.</param>
            <param name="source">The input stream.</param>
            <returns>The maximum item.</returns>  
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.MinBy``2(Nessos.Streams.Stream{``0},System.Func{``0,``1})">
            <summary>Locates the minimum element of the stream by given key.</summary>
            <param name="projection">A function to transform items of the input stream into comparable keys.</param>
            <param name="source">The input stream.</param>
            <returns>The maximum item.</returns>  
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.AggregateBy``3(Nessos.Streams.Stream{``0},System.Func{``0,``1},System.Func{``2,``0,``2},System.Func{``2})">
            <summary>Applies a state-updating function to a stream of inputs, grouped by key projection.</summary>
            <param name="projection">A function to transform items of the input stream into comparable keys.</param>
            <param name="folder">Folding function.</param>
            <param name="init">State initializing function.</param>
            <param name="source">The input stream.</param>
            <returns>A stream of tuples where each tuple contains the unique key and a sequence of all the elements that match the key.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.CountBy``2(Nessos.Streams.Stream{``0},System.Func{``0,``1})">
            <summary>Applies a key-generating function to each element of the input stream and yields a stream of unique keys and their frequency.</summary>
            <param name="projection">A function to transform items of the input stream into comparable keys.</param>
            <param name="stream">The input stream.</param>
            <returns>A stream of tuples where each tuple contains the unique key and a sequence of all the elements that match the key.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.Zip``3(Nessos.Streams.Stream{``0},Nessos.Streams.Stream{``1},System.Func{``0,``1,``2})">
            <summary>Applies a specified function to the corresponding elements of two streams, producing a stream of the results.</summary>
            <param name="resultSelector">The combiner function.</param>
            <param name="first">The first input stream.</param>
            <param name="second">The second input stream.</param>
            <returns>The result stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.Streams.IsEmpty``1(Nessos.Streams.Stream{``0})">
            <summary>Returns true if the stream is empty, false otherwise.</summary>
            <param name="source">The input stream.</param>
            <returns>true if the input stream is empty, false otherwise.</returns>
        </member>
        <member name="T:Nessos.Streams.CSharp.ParStreams">
            <summary>
            Parallel Stream operations
            </summary>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.AsParStream``1(``0[])">
            <summary>Wraps array as a parallel stream.</summary>
            <param name="source">The input array.</param>
            <returns>The result parallel stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.AsParStream``1(System.Collections.Generic.List{``0})">
            <summary>Wraps List as a parallel stream.</summary>
            <param name="source">The input array.</param>
            <returns>The result parallel stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.AsParStream``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>Wraps IEnumerable as a parallel stream.</summary>
            <param name="source">The input seq.</param>
            <returns>The result parallel stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Select``2(Nessos.Streams.ParStream{``0},System.Func{``0,``1})">
            <summary>Transforms each element of the input parallel stream.</summary>
            <param name="f">A function to transform items from the input parallel stream.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The result parallel stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Where``1(Nessos.Streams.ParStream{``0},System.Func{``0,System.Boolean})">
            <summary>Filters the elements of the input parallel stream.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The result parallel stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.SelectMany``2(Nessos.Streams.ParStream{``0},System.Func{``0,Nessos.Streams.Stream{``1}})">
            <summary>Transforms each element of the input parallel stream to a new stream and flattens its elements.</summary>
            <param name="f">A function to transform items from the input parallel stream.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The result parallel stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Aggregate``2(Nessos.Streams.ParStream{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1})">
            <summary>Applies a function to each element of the parallel stream, threading an accumulator argument through the computation. If the input function is f and the elements are i0...iN, then this function computes f (... (f s i0)...) iN.</summary>
            <param name="state">A function that produces the initial state.</param>
            <param name="folder">A function that updates the state with each element from the parallel stream.</param>
            <param name="combiner">A function that combines partial states into a new state.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The final result.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.OrderBy``2(Nessos.Streams.ParStream{``0},System.Func{``0,``1})">
            <summary>Applies a key-generating function to each element of the input parallel stream and yields a parallel stream ordered by keys.</summary>
            <param name="projection">A function to transform items of the input parallel stream into comparable keys.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The result parallel stream.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.GroupBy``2(Nessos.Streams.ParStream{``0},System.Func{``0,``1})">
            <summary>Applies a key-generating function to each element of the input parallel stream and yields a parallel stream of unique keys and a sequence of all elements that have each key.</summary>
            <param name="projection">A function to transform items of the input parallel stream into comparable keys.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>A parallel stream of IGrouping.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Sum(Nessos.Streams.ParStream{System.Int32})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Sum(Nessos.Streams.ParStream{System.Int64})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Sum(Nessos.Streams.ParStream{System.Single})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Sum(Nessos.Streams.ParStream{System.Double})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Sum(Nessos.Streams.ParStream{System.Decimal})">
            <summary>Returns the sum of the elements.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The sum of the elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Count``1(Nessos.Streams.ParStream{``0})">
            <summary>Returns the total number of elements of the parallel stream.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The total number of elements.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.ToArray``1(Nessos.Streams.ParStream{``0})">
            <summary>Creates an array from the given parallel stream.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The result array.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.ToList``1(Nessos.Streams.ParStream{``0})">
            <summary>Creates an List from the given parallel stream.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The result List.</returns>    
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.First``1(Nessos.Streams.ParStream{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the first element for which the given function returns true. Raises InvalidOperationException if no such element exists.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The first element for which the predicate returns true.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the predicate evaluates to false for all the elements of the parallel stream or if the parallel stream is empty.</exception>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.First``1(Nessos.Streams.ParStream{``0})">
            <summary>Returns the first element in the stream.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The first element in the parllel stream.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the parallel stream is empty.</exception>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.FirstOrDefault``1(Nessos.Streams.ParStream{``0})">
            <summary>Returns the first element in the stream, or the default value if the stream is empty.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The first element in the  parallel stream, or the default value if the parallel stream is empty.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.FirstOrDefault``1(Nessos.Streams.ParStream{``0},System.Func{``0,System.Boolean})">
            <summary>Returns the first element for which the given function returns true. Returns the default value if no such element exists, or the input stream is empty.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The first element for which the predicate returns true, or the default value if no such element exists or the input parallel stream is empty.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Any``1(Nessos.Streams.ParStream{``0},System.Func{``0,System.Boolean})">
            <summary>Tests if any element of the stream satisfies the given predicate.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>true if any element satisfies the predicate. Otherwise, returns false.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.All``1(Nessos.Streams.ParStream{``0},System.Func{``0,System.Boolean})">
            <summary>Tests if all elements of the parallel stream satisfy the given predicate.</summary>
            <param name="predicate">A function to test each source element for a condition.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>true if all of the elements satisfies the predicate. Otherwise, returns false.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Take``1(Nessos.Streams.ParStream{``0},System.Int32)">
            <summary>Returns the elements of the parallel stream up to a specified count.</summary>
            <param name="n">The number of items to take.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The result parallel stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.Skip``1(Nessos.Streams.ParStream{``0},System.Int32)">
            <summary>Returns a stream that skips N elements of the input parallel stream and then yields the remaining elements of the stream.</summary>
            <param name="n">The number of items to skip.</param>
            <param name="stream">The input parallel stream.</param>
            <returns>The result parallel stream.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.MaxBy``2(Nessos.Streams.ParStream{``0},System.Func{``0,``1})">
            <summary>Locates the maximum element of the parallel stream by given key.</summary>
            <param name="projection">A function to transform items of the input stream into comparable keys.</param>
            <param name="source">The input stream.</param>
            <returns>The maximum item.</returns>  
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.MinBy``2(Nessos.Streams.ParStream{``0},System.Func{``0,``1})">
            <summary>Locates the minimum element of the parallel stream by given key.</summary>
            <param name="projection">A function to transform items of the input stream into comparable keys.</param>
            <param name="source">The input stream.</param>
            <returns>The maximum item.</returns>  
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.AggregateBy``3(Nessos.Streams.ParStream{``0},System.Func{``0,``1},System.Func{``2,``0,``2},System.Func{``2})">
            <summary>Applies a key-generating function to each element of a ParStream and return a ParStream yielding unique keys and the result of the threading an accumulator.</summary>
            <param name="projection">A function to transform items from the input ParStream to keys.</param>
            <param name="folder">A function that updates the state with each element from the ParStream.</param>
            <param name="state">A function that produces the initial state.</param>
            <param name="stream">The input ParStream.</param>
            <returns>The final result.</returns> 
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.CountBy``2(Nessos.Streams.ParStream{``0},System.Func{``0,``1})">
            <summary>
            Applies a key-generating function to each element of a ParStream and return a ParStream yielding unique keys and their number of occurrences in the original sequence.
            </summary>
            <param name="projection">A function that maps items from the input ParStream to keys.</param>
            <param name="stream">The input ParStream.</param>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.AsOrdered``1(Nessos.Streams.ParStream{``0})">
            <summary>Returns a parallel stream that preserves ordering.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The result parallel stream as ordered.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.AsUnordered``1(Nessos.Streams.ParStream{``0})">
            <summary>Returns a parallel stream that is unordered.</summary>
            <param name="stream">The input parallel stream.</param>
            <returns>The result parallel stream as unordered.</returns>
        </member>
        <member name="M:Nessos.Streams.CSharp.ParStreams.IsEmpty``1(Nessos.Streams.ParStream{``0})">
            <summary>Returns true if the stream is empty, false otherwise.</summary>
            <param name="source">The input stream.</param>
            <returns>true if the input stream is empty, false otherwise.</returns>
        </member>
    </members>
</doc>
